{
  "version": 3,
  "sources": ["../../node_modules/@_tw/typography/block-editor-classes.js", "../../javascript/block-editor.js"],
  "sourcesContent": ["/* global wp, tailwindTypographyClasses */\n\n/**\n * This file adds front-end post title and Tailwind Typography classes to the\n * block editor. It also adds some helper classes so you can access the post\n * type when modifying the block editor\u2019s appearance.\n *\n * To see this integrated in _tw, please review:\n * https://github.com/gregsullivan/_tw\n */\n\n// Set our target classes and the classes we\u2019ll add to them.\nvar targetClasses = {\n  'edit-post-visual-editor__post-title-wrapper': ['entry-header'],\n  'wp-block-post-title': ['entry-title'],\n  'wp-block-post-content': ['entry-content', ...tailwindTypographyClasses],\n}\n\nwp.domReady(() => {\n  // Add the necessary Tailwind Typography classes to the block editor.\n  addTypographyClasses()\n})\n\n/**\n * Get the class for the current post type from the `body` element. (We would\n * use `wp.data`, but it doesn't work reliably both inside and outside of the\n * post editor `iframe`.)\n */\nfunction getCurrentPostTypeClass() {\n  let currentClass = null\n\n  for (const classToCheck of document.body.classList) {\n    if (classToCheck.startsWith('post-type-')) {\n      currentClass = classToCheck\n      break\n    }\n  }\n\n  return currentClass\n}\n\n/**\n * Because Gutenberg\u2019s `isEditorReady` function remains unstable,\n * we\u2019ll use an interval to watch for the arrival of the elements we need.\n */\nfunction addTypographyClasses() {\n  const editorLoadedInterval = setInterval(function () {\n    // Wait until elements with all target classes are present.\n    if (\n      Object.keys(targetClasses).every(\n        (className) => document.getElementsByClassName(className).length\n      )\n    ) {\n      if (getCurrentPostTypeClass()) {\n        // Add the post type class throughout.\n        Object.values(targetClasses).forEach((className) =>\n          className.push(getCurrentPostTypeClass())\n        )\n      }\n\n      // Add the classes before creating the mutation observer.\n      Object.entries(targetClasses).forEach(([targetClass, classes]) => {\n        document.getElementsByClassName(targetClass)[0].classList.add(...classes)\n      })\n\n      // Add mutation observers to each element.\n      Object.keys(targetClasses).forEach((className) => {\n        mutationObserver.observe(document.querySelector('.' + className), {\n          attributes: true,\n          attributeFilter: ['class'],\n        })\n      })\n\n      // Stop the interval.\n      clearInterval(editorLoadedInterval)\n    } else if (document.getElementsByName('editor-canvas').length) {\n      // If the block editor has been loaded in an iframe, and this code\n      // is running outside of that iframe, stop the interval. (This code\n      // will run again inside the iframe.)\n      clearInterval(editorLoadedInterval)\n    }\n  }, 40)\n}\n\n/**\n * We need to ensure the class names we add are added again if the React\n * component is updated, removing them in the process. The mutation observer\n * below will check for the needed classes and add them if they\u2019ve been\n * removed.\n */\nconst mutationObserver = new MutationObserver(function (mutations) {\n  mutations.forEach(function (mutation) {\n    const classList = mutation.target.classList\n\n    Object.entries(targetClasses).forEach(([targetClass, classes]) => {\n      if (classList.contains(targetClass)) {\n        // Check whether all added classes are present.\n        if (!classes.every((className) => classList.contains(className))) {\n          // Add them again if they\u2019re not.\n          classList.add(...classes)\n        }\n      }\n    })\n  })\n})\n", "/**\n * Block editor modifications\n *\n * This file is loaded only by the block editor. Use it to modify the block\n * editor via its APIs.\n *\n * The JavaScript code you place here will be processed by esbuild, and the\n * output file will be created at `../theme/js/block-editor.min.js` and\n * enqueued in `../theme/functions.php`.\n *\n * For esbuild documentation, please see:\n * https://esbuild.github.io/\n */\n\n/**\n * This import adds your front-end post title and Tailwind Typography classes\n * to the block editor. It also adds some helper classes so you can access the\n * post type when modifying the block editor\u2019s appearance.\n */\nimport '@_tw/typography/block-editor-classes';\n\nwp.domReady(() => {\n\t/**\n\t * Add support for Tailwind Typography\u2019s `lead` class via a block style.\n\t */\n\twp.blocks.registerBlockStyle('core/paragraph', {\n\t\tname: 'lead',\n\t\tlabel: 'Lead',\n\t});\n\n\t// Add additional block editor modifications here. For example, you could\n\t// register another block style:\n\t//\n\t// wp.blocks.registerBlockStyle( 'core/quote', {\n\t// \tname: 'fancy-quote',\n\t// \tlabel: 'Fancy Quote',\n\t// } );\n});\n"],
  "mappings": ";;AAYA,MAAI,gBAAgB;AAAA,IAClB,+CAA+C,CAAC,cAAc;AAAA,IAC9D,uBAAuB,CAAC,aAAa;AAAA,IACrC,yBAAyB,CAAC,iBAAiB,GAAG,yBAAyB;AAAA,EACzE;AAEA,KAAG,SAAS,MAAM;AAEhB,yBAAqB;AAAA,EACvB,CAAC;AAOD,WAAS,0BAA0B;AACjC,QAAI,eAAe;AAEnB,eAAW,gBAAgB,SAAS,KAAK,WAAW;AAClD,UAAI,aAAa,WAAW,YAAY,GAAG;AACzC,uBAAe;AACf;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAMA,WAAS,uBAAuB;AAC9B,UAAM,uBAAuB,YAAY,WAAY;AAEnD,UACE,OAAO,KAAK,aAAa,EAAE;AAAA,QACzB,CAAC,cAAc,SAAS,uBAAuB,SAAS,EAAE;AAAA,MAC5D,GACA;AACA,YAAI,wBAAwB,GAAG;AAE7B,iBAAO,OAAO,aAAa,EAAE;AAAA,YAAQ,CAAC,cACpC,UAAU,KAAK,wBAAwB,CAAC;AAAA,UAC1C;AAAA,QACF;AAGA,eAAO,QAAQ,aAAa,EAAE,QAAQ,CAAC,CAAC,aAAa,OAAO,MAAM;AAChE,mBAAS,uBAAuB,WAAW,EAAE,CAAC,EAAE,UAAU,IAAI,GAAG,OAAO;AAAA,QAC1E,CAAC;AAGD,eAAO,KAAK,aAAa,EAAE,QAAQ,CAAC,cAAc;AAChD,2BAAiB,QAAQ,SAAS,cAAc,MAAM,SAAS,GAAG;AAAA,YAChE,YAAY;AAAA,YACZ,iBAAiB,CAAC,OAAO;AAAA,UAC3B,CAAC;AAAA,QACH,CAAC;AAGD,sBAAc,oBAAoB;AAAA,MACpC,WAAW,SAAS,kBAAkB,eAAe,EAAE,QAAQ;AAI7D,sBAAc,oBAAoB;AAAA,MACpC;AAAA,IACF,GAAG,EAAE;AAAA,EACP;AAQA,MAAM,mBAAmB,IAAI,iBAAiB,SAAU,WAAW;AACjE,cAAU,QAAQ,SAAU,UAAU;AACpC,YAAM,YAAY,SAAS,OAAO;AAElC,aAAO,QAAQ,aAAa,EAAE,QAAQ,CAAC,CAAC,aAAa,OAAO,MAAM;AAChE,YAAI,UAAU,SAAS,WAAW,GAAG;AAEnC,cAAI,CAAC,QAAQ,MAAM,CAAC,cAAc,UAAU,SAAS,SAAS,CAAC,GAAG;AAEhE,sBAAU,IAAI,GAAG,OAAO;AAAA,UAC1B;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH,CAAC;;;ACnFD,KAAG,SAAS,MAAM;AAIjB,OAAG,OAAO,mBAAmB,kBAAkB;AAAA,MAC9C,MAAM;AAAA,MACN,OAAO;AAAA,IACR,CAAC;AAAA,EASF,CAAC;",
  "names": []
}
