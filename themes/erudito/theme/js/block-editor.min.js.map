{
  "version": 3,
  "sources": ["../../node_modules/@_tw/typography/block-editor-classes.js", "../../javascript/block-editor.js"],
  "sourcesContent": ["/* global wp, tailwindTypographyClasses */\n\n/**\n * This file adds front-end post title and Tailwind Typography classes to the\n * block editor. It also adds some helper classes so you can access the post\n * type when modifying the block editor\u2019s appearance.\n *\n * To see this integrated in _tw, please review:\n * https://github.com/gregsullivan/_tw\n */\n\n// Set our target classes and the classes we\u2019ll add to them.\nvar targetClasses = {\n  'edit-post-visual-editor__post-title-wrapper': ['entry-header'],\n  'wp-block-post-title': ['entry-title'],\n  'wp-block-post-content': ['entry-content', ...tailwindTypographyClasses],\n}\n\nwp.domReady(() => {\n  // Add the necessary Tailwind Typography classes to the block editor.\n  addTypographyClasses()\n})\n\n/**\n * Get the class for the current post type from the `body` element. (We would\n * use `wp.data`, but it doesn't work reliably both inside and outside of the\n * post editor `iframe`.)\n */\nfunction getCurrentPostTypeClass() {\n  let currentClass = null\n\n  for (const classToCheck of document.body.classList) {\n    if (classToCheck.startsWith('post-type-')) {\n      currentClass = classToCheck\n      break\n    }\n  }\n\n  return currentClass\n}\n\n/**\n * Because Gutenberg\u2019s `isEditorReady` function remains unstable,\n * we\u2019ll use an interval to watch for the arrival of the elements we need.\n */\nfunction addTypographyClasses() {\n  const editorLoadedInterval = setInterval(function () {\n    // Wait until elements with all target classes are present.\n    if (\n      Object.keys(targetClasses).every(\n        (className) => document.getElementsByClassName(className).length\n      )\n    ) {\n      if (getCurrentPostTypeClass()) {\n        // Add the post type class throughout.\n        Object.values(targetClasses).forEach((className) =>\n          className.push(getCurrentPostTypeClass())\n        )\n      }\n\n      // Add the classes before creating the mutation observer.\n      Object.entries(targetClasses).forEach(([targetClass, classes]) => {\n        document.getElementsByClassName(targetClass)[0].classList.add(...classes)\n      })\n\n      // Add mutation observers to each element.\n      Object.keys(targetClasses).forEach((className) => {\n        mutationObserver.observe(document.querySelector('.' + className), {\n          attributes: true,\n          attributeFilter: ['class'],\n        })\n      })\n\n      // Stop the interval.\n      clearInterval(editorLoadedInterval)\n    } else if (document.getElementsByName('editor-canvas').length) {\n      // If the block editor has been loaded in an iframe, and this code\n      // is running outside of that iframe, stop the interval. (This code\n      // will run again inside the iframe.)\n      clearInterval(editorLoadedInterval)\n    }\n  }, 40)\n}\n\n/**\n * We need to ensure the class names we add are added again if the React\n * component is updated, removing them in the process. The mutation observer\n * below will check for the needed classes and add them if they\u2019ve been\n * removed.\n */\nconst mutationObserver = new MutationObserver(function (mutations) {\n  mutations.forEach(function (mutation) {\n    const classList = mutation.target.classList\n\n    Object.entries(targetClasses).forEach(([targetClass, classes]) => {\n      if (classList.contains(targetClass)) {\n        // Check whether all added classes are present.\n        if (!classes.every((className) => classList.contains(className))) {\n          // Add them again if they\u2019re not.\n          classList.add(...classes)\n        }\n      }\n    })\n  })\n})\n", "/**\n * Block editor modifications\n *\n * This file is loaded only by the block editor. Use it to modify the block\n * editor via its APIs.\n *\n * The JavaScript code you place here will be processed by esbuild, and the\n * output file will be created at `../theme/js/block-editor.min.js` and\n * enqueued in `../theme/functions.php`.\n *\n * For esbuild documentation, please see:\n * https://esbuild.github.io/\n */\n\n/**\n * This import adds your front-end post title and Tailwind Typography classes\n * to the block editor. It also adds some helper classes so you can access the\n * post type when modifying the block editor\u2019s appearance.\n */\nimport '@_tw/typography/block-editor-classes';\n\nwp.domReady(() => {\n\t/**\n\t * Add support for Tailwind Typography\u2019s `lead` class via a block style.\n\t */\n\twp.blocks.registerBlockStyle('core/paragraph', {\n\t\tname: 'lead',\n\t\tlabel: 'Lead',\n\t});\n\n\t// Add additional block editor modifications here. For example, you could\n\t// register another block style:\n\t//\n\t// wp.blocks.registerBlockStyle( 'core/quote', {\n\t// \tname: 'fancy-quote',\n\t// \tlabel: 'Fancy Quote',\n\t// } );\n});\n"],
  "mappings": "MAYA,IAAIA,EAAgB,CAClB,8CAA+C,CAAC,cAAc,EAC9D,sBAAuB,CAAC,aAAa,EACrC,wBAAyB,CAAC,gBAAiB,GAAG,yBAAyB,CACzE,EAEA,GAAG,SAAS,IAAM,CAEhBC,EAAqB,CACvB,CAAC,EAOD,SAASC,GAA0B,CACjC,IAAIC,EAAe,KAEnB,QAAWC,KAAgB,SAAS,KAAK,UACvC,GAAIA,EAAa,WAAW,YAAY,EAAG,CACzCD,EAAeC,EACf,KACF,CAGF,OAAOD,CACT,CAMA,SAASF,GAAuB,CAC9B,IAAMI,EAAuB,YAAY,UAAY,CAGjD,OAAO,KAAKL,CAAa,EAAE,MACxBM,GAAc,SAAS,uBAAuBA,CAAS,EAAE,MAC5D,GAEIJ,EAAwB,GAE1B,OAAO,OAAOF,CAAa,EAAE,QAASM,GACpCA,EAAU,KAAKJ,EAAwB,CAAC,CAC1C,EAIF,OAAO,QAAQF,CAAa,EAAE,QAAQ,CAAC,CAACO,EAAaC,CAAO,IAAM,CAChE,SAAS,uBAAuBD,CAAW,EAAE,CAAC,EAAE,UAAU,IAAI,GAAGC,CAAO,CAC1E,CAAC,EAGD,OAAO,KAAKR,CAAa,EAAE,QAASM,GAAc,CAChDG,EAAiB,QAAQ,SAAS,cAAc,IAAMH,CAAS,EAAG,CAChE,WAAY,GACZ,gBAAiB,CAAC,OAAO,CAC3B,CAAC,CACH,CAAC,EAGD,cAAcD,CAAoB,GACzB,SAAS,kBAAkB,eAAe,EAAE,QAIrD,cAAcA,CAAoB,CAEtC,EAAG,EAAE,CACP,CAQA,IAAMI,EAAmB,IAAI,iBAAiB,SAAUC,EAAW,CACjEA,EAAU,QAAQ,SAAUC,EAAU,CACpC,IAAMC,EAAYD,EAAS,OAAO,UAElC,OAAO,QAAQX,CAAa,EAAE,QAAQ,CAAC,CAACO,EAAaC,CAAO,IAAM,CAC5DI,EAAU,SAASL,CAAW,IAE3BC,EAAQ,MAAOF,GAAcM,EAAU,SAASN,CAAS,CAAC,GAE7DM,EAAU,IAAI,GAAGJ,CAAO,EAG9B,CAAC,CACH,CAAC,CACH,CAAC,ECnFD,GAAG,SAAS,IAAM,CAIjB,GAAG,OAAO,mBAAmB,iBAAkB,CAC9C,KAAM,OACN,MAAO,MACR,CAAC,CASF,CAAC",
  "names": ["targetClasses", "addTypographyClasses", "getCurrentPostTypeClass", "currentClass", "classToCheck", "editorLoadedInterval", "className", "targetClass", "classes", "mutationObserver", "mutations", "mutation", "classList"]
}
